The Musicazoo backend (colloquially, the "queue") manages three different types of objects:

The first and easiest is Statics. A static is anything that persists throughout the entire time that Musicazoo is running, and can be manipulated or queried. An example of a static is the volume control.

The second is Modules. A module is anything that can be added to the queue. Modules are constructed when they are added to the queue. When the module reaches the top of the queue, the module's play() method is called. play() blocks until the module is done playing, and then the module is destroyed. Modules may define additional methods for interaction, but they are not required. For instance, most modules define a "stop" command which causes play() to terminate immediately rather than finish. An example of a module is a Youtube video player.

The third is Backgrounds. Backgrounds are shown when there is nothing playing. There can only be one background at a time. When a new background is set, it is constructed immediately (even if something is currently playing.) When the background should be shown, its show() method is called. When it should be hidden, its hide() method is called. When it is removed or replaced with a different background, its close() method is called.

This tutorial takes you through the creation of a simple background. It will display the current time on the screen when nothing else is playing. It assumes that you have a working local Musicazoo server, i.e. that mzserver.py runs without error and you can add and remove things from the queue.

The first thing to do is navigate to the backgrounds directory. It is located at musicazoo/backgrounds. Here you will see some existing backgrounds that can be used as templates. We will build one from scratch to demonstrate all the necessary steps.

Make a new file called clock.py and make a new class called Clock.

clock.py
class Clock:
        pass

For graphics, we will extend the included FullScreenGraphics class, found in musicazoo.lib.graphics. This is a Tkinter wrapper that abstracts away all the necessary setup and threading concerns to make and show a full screen window.

clock.py
from musicazoo.lib.graphics import FullScreenGraphics

class Clock(FullScreenGraphics):
        pass

At this point you can test whether FullScreenGraphics is working properly. Launch a Python shell and try this:
>>> from clock import Clock
>>> c=Clock()
>>> c.show()	# A big blank white screen should appear
>>> 		# If you can manage to drag it out of the way, do so, and run this command:
>>> c.hide()
>>> 		# Alternatively, press Escape to destroy it (you will not be able to show it again)
>>> c.close()	# Hides the graphics if visible and destroys the object

As you can see, by extending FSG we have inherited three of the necessary methods for this to be a background.

Now, let's make it actually display a clock. We'll need Tkinter, so go ahead and import it. In our constructor, we'll make a canvas and a text object. Of course, they won't be visible until show().

The first thing to do is call the FSG superclass constructor.

Then, we can create a canvas on which to draw. FSG is a Tk root object, so the canvas is added to it directly. It also has properties width and height which are useful for sizing the canvas. It is important to set the canvas's highlightthickness to zero or there will be a thin border around it.

Once we have a canvas, we can add a text object to it. FSG provides a convenience method center() which returns (width/2,height/2). We can use it to center the text. For now, we'll just make it say "Hello, World!

from musicazoo.lib.graphics import FullScreenGraphics
import Tkinter

clock.py
class Clock(FullScreenGraphics):
        def __init__(self):
                FullScreenGraphics.__init__(self)

                self.c=Tkinter.Canvas(self,width=self.width,height=self.height,bg='black',highlightthickness=0)
                self.c.pack()

                self.text=self.c.create_text(self.center(), fill='white', justify=Tkinter.CENTER, font=("Helvetica",72), text='Hello, World!')

If you run the same commands in the Python shell, you should see your text appear.

The way to get the current time in python is a mouthful, so we'll abstract it away in a little static function.
clock.py (snippet)
import datetime

def get_time(self):
        return datetime.datetime.now().strftime('%H:%M:%S')

In order to update the time, we'll define a method called animate. It will use FSG's defer() function to set a one-second timer. defer() is a wrapper around Tk's after() that makes it work with FSG's threading.

clock.py (snippet)
def animate(self):
	self.c.itemconfig(self.text,text=get_time())
	self.update()
	self.defer(1000,self.animate)

Finally, we'll need to make the initial call to animate() in the constructor. This will also take care of setting the initial text, so we can remove our "Hello, World!" placeholder.

The code so far looks like this:

clock.py
from musicazoo.lib.graphics import FullScreenGraphics
import Tkinter
import datetime

class Clock(FullScreenGraphics):
        def __init__(self):
                FullScreenGraphics.__init__(self)

                self.c=Tkinter.Canvas(self,width=self.width,height=self.height,bg='black',highlightthickness=0)
                self.c.pack()

                self.text=self.c.create_text(self.center(), fill='white', justify=Tkinter.CENTER, font=("Helvetica",72))
                self.animate()

	def get_time(self):
	        return datetime.datetime.now().strftime('%H:%M:%S')

        def animate(self):
                self.c.itemconfig(self.text,text=self.get_time())
                self.update()
                self.defer(1000,self.animate)

Testing this code in the shell as before should yield a working clock.

It is worth noting that the clock will always be updating, even when the background is hidden. For a clock, this is acceptable because it is not very CPU-intensive. For a more intensive background, you may consider adding hooks to show() and hide() to start and stop the animation.

Almost done!

In order to make this function as a Musicazoo background, we need just a few more things. First, we need to make the constructor take more arguments. When the object is constructed, it will be given its parent "queue" object as well as its identifier. We won't use these pieces of information in the clock, but they may be useful in other circumstances. For instance, if an error occurs, the background can use these to delete itself gracefully.

clock.py (snippet)
def __init__(self,queue,uid):

We'll also need to give it a few variables so that the Musicazoo knows how to interact with it. The first is a type name. This is a string that differentiates it from other backgrounds. We'll call it 'clock'.

clock.py (snippet)
TYPE_STRING='clock'

We also need to provide two dicts: one of parameters and one of commands. Parameters are read-only values that can be queried. Querying for parmeters should not affect state. The parameter dictionary maps a string (the name of the parameter) to a function that returns the parameter. For the sake of example, let's add one parameter: time, which returns the time being displayed. This way, a front-end can display the server time if desired.

clock.py (snippet)
parameters={
	('time':get_time)
}

Commands are like parameters, except they allow for a greater deal of interaction. Commands accept arguments and can affect state. Their disadvantage is that they cannot be queried en masse like parameters. This is more relevant for modules, of which there can be many. For backgrounds, it is somewhat of a moot point. However, the distinction remains useful. The commands dict has the same format as the parameters dict. We will not have any commands.

clock.py (snippet)
commands={
}

The completed clock.py is as follows:

clock.py
from musicazoo.lib.graphics import FullScreenGraphics
import Tkinter
import datetime

class Clock(FullScreenGraphics):
        TYPE_STRING='clock'

        def __init__(self,queue,uid):
                FullScreenGraphics.__init__(self)

                self.c=Tkinter.Canvas(self,width=self.width,height=self.height,bg='black',highlightthickness=0)
                self.c.pack()

                self.text=self.c.create_text(self.center(), fill='white', justify=Tkinter.CENTER, font=("Helvetica",72))
                self.animate()

	def get_time(self):
	        return datetime.datetime.now().strftime('%H:%M:%S')

        def animate(self):
                self.c.itemconfig(self.text,text=self.get_time())
                self.update()
                self.defer(1000,self.animate)

        parameters={
                'time':get_time
        }

        commands={
        }

Now, the only thing left to do is to tell the queue that this background exists. The relevant file is musicazoo/settings.py. Here, you will find a list of backgrounds. Simply add the new background class (and its import).

settings.py (snippet)
import musicazoo.backgrounds.clock

BACKGROUNDS = [
    ... # Existing backgrounds
    musicazoo.backgrounds.clock.Clock
]

That's it!

Go ahead and run mzserver.py, and in another terminal, raw.py. In raw.py, send the following JSON:
{"cmd":"set_bg","args":{"type":"clock"}}

A clock should appear. If you add something to the queue, the clock should disappear and reappear when the video is finished.

Sending the following JSON should read the time:
{"cmd":"bg","args":{"parameters":{"clock":["time"]}}}

This command is parsed as follows:
{
	"cmd":"bg",			# Tell me about the background.
	"args":	{
		"parameters": {		# Here are the things I want to know.
			"clock": [	# If the background is a clock, tell me these things:
				"time"	# The time
			]
		}
	}
}

